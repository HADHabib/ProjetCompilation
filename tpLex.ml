# 1 "tpLex.mll"
 
open Ast
open TpParse
open Lexing
exception Eof

(* gere les positions numero de ligne + decalage dans la ligne *)
let next_line lexbuf = Lexing.new_line lexbuf

(* Potentiellement utile pour distinguer mots-clef et vrais identificateurs *)
let keyword_table = Hashtbl.create 16

let _ =
    List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok) [
        "class", CLASS;
        "object", OBJECT;
        "extends", EXTENDS;
        "is", IS;
        "var", VAR;
        "def", DEF;
        "auto", AUTO;
        "override", OVERRIDE;
        "new", NEW;
        "return", RETURN;
        "if", IF;
        "then", THEN;
        "else", ELSE;
        "not", NOT;
        "and", AND;
        "or", OR
      ]


# 36 "tpLex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\224\255\225\255\226\255\002\000\229\255\230\255\231\255\
    \233\255\234\255\235\255\236\255\002\000\001\000\240\255\003\000\
    \030\000\246\255\247\255\248\255\001\000\079\000\095\000\253\255\
    \254\255\095\000\251\255\252\255\249\255\002\000\186\000\090\000\
    \220\000\173\000\196\000\003\001\211\000\026\001\239\255\243\255\
    \241\255\228\255\232\255\227\255\144\000\253\255\254\255\048\000\
    \255\255\011\000\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\031\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\018\000\017\000\255\255\013\000\
    \011\000\255\255\255\255\255\255\031\000\005\000\010\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\000\000\000\000\000\000\029\000\255\255\255\255\000\000\
    \000\000\255\255\000\000\000\000\000\000\029\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\045\000\000\000\000\000\255\255\
    \000\000\050\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\023\000\000\000\000\000\024\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\051\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\003\000\020\000\028\000\028\000\000\000\013\000\041\000\
    \007\000\006\000\017\000\019\000\011\000\018\000\010\000\022\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\012\000\005\000\016\000\014\000\015\000\042\000\
    \040\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\039\000\038\000\030\000\030\000\048\000\
    \000\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\009\000\004\000\008\000\043\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\027\000\036\000\036\000\036\000\036\000\026\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\047\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\029\000\000\000\029\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\000\000\
    \000\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\000\000\000\000\
    \002\000\255\255\255\255\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\255\255\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\029\000\000\000\
    \000\000\000\000\000\000\000\000\029\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\031\000\000\000\000\000\029\000\000\000\029\000\000\000\
    \000\000\000\000\032\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\000\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\049\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\020\000\029\000\255\255\000\000\013\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\016\000\016\000\020\000\029\000\047\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\031\000\031\000\031\000\031\000\022\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\255\255\044\000\255\255\255\255\255\255\255\255\255\255\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\044\000\255\255\255\255\255\255\255\255\255\255\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\030\000\255\255\030\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\255\255\
    \255\255\255\255\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\255\255\255\255\
    \000\000\020\000\029\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\049\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\030\000\255\255\
    \255\255\255\255\255\255\255\255\030\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\255\255\255\255\255\255\255\255\255\255\
    \030\000\030\000\255\255\255\255\030\000\255\255\030\000\255\255\
    \255\255\255\255\030\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\255\255\035\000\035\000\035\000\035\000\
    \035\000\035\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\035\000\035\000\035\000\035\000\
    \035\000\035\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \044\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 53 "tpLex.mll"
                  id
# 222 "tpLex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 53 "tpLex.mll"
                         ( try Hashtbl.find keyword_table id with Not_found -> ID id )
# 226 "tpLex.ml"

  | 1 ->
# 54 "tpLex.mll"
                         ( token lexbuf )
# 231 "tpLex.ml"

  | 2 ->
# 55 "tpLex.mll"
                         ( next_line lexbuf; token lexbuf)
# 236 "tpLex.ml"

  | 3 ->
# 56 "tpLex.mll"
                         (
                            (* lance la fonction specialisée dans la
                             * reconnaissance des commentaires
                             *)
                            multiline_comment lexbuf
                         )
# 246 "tpLex.ml"

  | 4 ->
# 62 "tpLex.mll"
                         ( comment lexbuf )
# 251 "tpLex.ml"

  | 5 ->
let
# 66 "tpLex.mll"
                lxm
# 257 "tpLex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 66 "tpLex.mll"
                         ( CSTE(int_of_string lxm) )
# 261 "tpLex.ml"

  | 6 ->
let
# 67 "tpLex.mll"
                           str
# 267 "tpLex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 67 "tpLex.mll"
                                      ( STRING(str) )
# 271 "tpLex.ml"

  | 7 ->
# 68 "tpLex.mll"
                         ( PLUS )
# 276 "tpLex.ml"

  | 8 ->
# 69 "tpLex.mll"
                         ( MINUS )
# 281 "tpLex.ml"

  | 9 ->
# 70 "tpLex.mll"
                         ( TIMES )
# 286 "tpLex.ml"

  | 10 ->
# 71 "tpLex.mll"
                         ( DIV )
# 291 "tpLex.ml"

  | 11 ->
# 72 "tpLex.mll"
                         ( RELOP (Ast.Lt) )
# 296 "tpLex.ml"

  | 12 ->
# 73 "tpLex.mll"
                         ( RELOP (Ast.Le) )
# 301 "tpLex.ml"

  | 13 ->
# 74 "tpLex.mll"
                         ( RELOP (Ast.Gt) )
# 306 "tpLex.ml"

  | 14 ->
# 75 "tpLex.mll"
                         ( RELOP (Ast.Ge) )
# 311 "tpLex.ml"

  | 15 ->
# 76 "tpLex.mll"
                         ( RELOP (Ast.Eq) )
# 316 "tpLex.ml"

  | 16 ->
# 77 "tpLex.mll"
                         ( RELOP (Ast.Neq) )
# 321 "tpLex.ml"

  | 17 ->
# 78 "tpLex.mll"
                         ( CONCAT )
# 326 "tpLex.ml"

  | 18 ->
# 79 "tpLex.mll"
                         ( COLON )
# 331 "tpLex.ml"

  | 19 ->
# 80 "tpLex.mll"
                         ( COMMA )
# 336 "tpLex.ml"

  | 20 ->
# 81 "tpLex.mll"
                         ( DOT )
# 341 "tpLex.ml"

  | 21 ->
# 82 "tpLex.mll"
                         ( LCBRACE )
# 346 "tpLex.ml"

  | 22 ->
# 83 "tpLex.mll"
                         ( RCBRACE )
# 351 "tpLex.ml"

  | 23 ->
# 84 "tpLex.mll"
                         ( ASSIGN )
# 356 "tpLex.ml"

  | 24 ->
# 85 "tpLex.mll"
                         ( LPAREN )
# 361 "tpLex.ml"

  | 25 ->
# 86 "tpLex.mll"
                         ( RPAREN )
# 366 "tpLex.ml"

  | 26 ->
# 87 "tpLex.mll"
                         ( SEMICOLON )
# 371 "tpLex.ml"

  | 27 ->
# 88 "tpLex.mll"
                         ( AND )
# 376 "tpLex.ml"

  | 28 ->
# 89 "tpLex.mll"
                         ( OR  )
# 381 "tpLex.ml"

  | 29 ->
# 90 "tpLex.mll"
                         ( NOT )
# 386 "tpLex.ml"

  | 30 ->
# 91 "tpLex.mll"
                         ( EOF )
# 391 "tpLex.ml"

  | 31 ->
let
# 92 "tpLex.mll"
         lxm
# 397 "tpLex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 92 "tpLex.mll"
                         ( (* On met un message et on essaye de scanner la
                            * suite. pour détecter le plus d'erreurs possibles
                            * d'un coup. Il faudrait probablement mémoriser
                            * qu'on a rencontré une erreur pour signaler à la
                            * fin que le programme était incorrect.
                            *)
             		   print_endline
                             ("undefined character: " ^ (String.make 1 lxm));
                           token lexbuf
           	         )
# 410 "tpLex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and multiline_comment lexbuf =
   __ocaml_lex_multiline_comment_rec lexbuf 44
and __ocaml_lex_multiline_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 107 "tpLex.mll"
                  ( (* quand on a reconnu la fin du commentaire, on relance
                     * recursivement l'analyseur lexical pour renvoyer le
                     * prochain token à l'analyseur syntaxique puisqu'on ne
                     * transmet pas les commentaires
                     *)
                     token lexbuf
                  )
# 428 "tpLex.ml"

  | 1 ->
# 114 "tpLex.mll"
                  ( new_line lexbuf; multiline_comment lexbuf )
# 433 "tpLex.ml"

  | 2 ->
# 115 "tpLex.mll"
                  ( multiline_comment lexbuf )
# 438 "tpLex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_multiline_comment_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 49
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 118 "tpLex.mll"
         ( new_line lexbuf; token lexbuf )
# 450 "tpLex.ml"

  | 1 ->
# 119 "tpLex.mll"
         ( comment lexbuf )
# 455 "tpLex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

